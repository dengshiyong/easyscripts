#!/usr/bin/python
# -*- coding: UTF-8 -*-
# shaozx@gmail.com 20090426

import os, sys, ConfigParser
import struct, fcntl, termios, signal

try:
    import pexpect, pxssh
except:
    print "\n\t缺少组件: 安装 python-pexpect 后重试\n"
    sys.exit(-1)


def Log(info):
    print "\n\t %s \n" % info


def sig_resizewin(sig, data):
    s = struct.pack("HHHH", 0, 0, 0, 0)
    a = struct.unpack('hhhh', fcntl.ioctl(sys.stdout.fileno(), termios.TIOCGWINSZ , s))
    child.setwinsize(a[0],a[1])


def checkConfig():
    # 打开配置文件 to.hosts ,先查找执行码所在目录
    inifile = os.path.dirname( sys.argv[0] ) + '/to.hosts'
    if inifile == '/to.hosts': inifile = 'to.hosts'

    if not os.path.exists(inifile):
        # 检查 $HOME/.to.hosts
        inifile = os.path.expandvars("$HOME/.to.hosts")
        if not os.path.exists(inifile):
            f = open(inifile,'w')
            f.write("#\n# to.hosts\n#\n")
            f.write("[demo]\nhost=10.0.2.3\nname=john\npass=123456\ntype=telnet")
            f.close()
            Log( "配置文件示例已经创建[%s]，修改后重试" % inifile )
            sys.exit(-1)
    return inifile


def show_hostlist():
    # 读配置文件,取出对应主机信息
    conf = ConfigParser.ConfigParser()
    conf.readfp( open(inifile) )

    if conf.has_section("ALIAS"):
        for h in conf.options("ALIAS"):
            print h
        conf.remove_section("ALIAS")

    conf.sections().sort()
    for h in conf.sections():
        print h


def show_hostinfo(hostid):
    # 打开配置文件 to.hosts
    inifile = os.path.dirname( sys.argv[0] ) + '/to.hosts'
    if inifile == '/to.hosts': inifile = 'to.hosts'

    # 读配置文件,取出对应主机信息
    conf = ConfigParser.ConfigParser()
    conf.readfp( open(inifile) )

    if conf.has_section(hostid):
        hostinfo["hostid"] = hostid
    elif conf.has_section("ALIAS") and conf.has_option("ALIAS",hostid):
        hostinfo["hostid"] = conf.get("ALIAS",hostid)
    else:
        Log( "错误:没有[%s]对应的主机信息" % hostid )
        return -1

    print "========[ %s ]==========" % hostid
    print "[%s]" % hostinfo["hostid"]

    for h in conf.options(hostinfo["hostid"]):
        print "%s=%s" % (h,conf.get(hostid,h))


def get_hostinfo(hostid):
    hostinfo={ 'hostid':'',
            'host':'', 'name':'', 'pass':'',
            'type':'', 'code':'', 'wait':10 }

    # 读配置文件,取出对应主机信息
    conf = ConfigParser.ConfigParser()
    conf.readfp( open(inifile) )

    if conf.has_section(hostid):
        hostinfo["hostid"] = hostid
    elif conf.has_option("ALIAS",hostid):
        hostid = conf.get("ALIAS",hostid)
        if conf.has_section(hostid):
            hostinfo["hostid"] = hostid
        else:
            Log( "错误:没有[%s]对应的主机信息" % hostid )
            return "" 
    else:
        Log( "错误:没有[%s]对应的主机信息" % hostid )
        return "" 

    # hostid username password
    try:
        hostinfo["host"] = conf.get(hostid,"host")
        hostinfo["name"] = conf.get(hostid,"name")
        hostinfo["pass"] = conf.get(hostid,"pass")
    except:
        Log( "错误:主机参数[host/name/pass]有误" )
        return ""
    # type : ssh/telnet/ftp
    if conf.has_option(hostid,"type"):
        hostinfo["type"] = conf.get(hostid,"type")
    else:
        hostinfo["type"] = "telnet"
    # code : character encoding
    if conf.has_option(hostid,"code"):
        hostinfo["code"] = conf.get(hostid,"code")
    else:
        hostinfo["code"] = ""
    # wait: timeout wait
    if conf.has_option(hostid,"wait"):
        hostinfo["wait"] = int(conf.get(hostid,"wait"))
    else:
        hostinfo["wait"] = 10

    return hostinfo


def TO_TELNET(hostinfo):
    hostaddr=hostinfo["host"]
    username=hostinfo["name"]
    password=hostinfo["pass"]
    code=hostinfo["code"]
    wait=hostinfo["wait"]

    """ 执行连线动作"""
    global child
    if len(code) > 0 :
        child = pexpect.spawn( 'luit -x -encoding %s telnet -E %s' % (code,hostaddr) );
    else:
        child = pexpect.spawn( 'telnet -E ' + hostaddr );

    signal.signal(signal.SIGWINCH, sig_resizewin)

    try:
        index = child.expect([               \
                '[Ll]ogin:( )$'             ,\
                'No route to host'          ,\
                'Network is unreachable'    ,\
                'Name or service not known' ,\
                'No such device'            ,\
                'Connection refused'         \
                ],timeout=wait)
        if index != 0 :
            Log( "错误[%s]:连接主机失败" % index )
            return -1
    except:
        Log( "错误:连接主机失败(超时001)" )
        return -1

    print "%s%s" % ( child.before, child.after ),

    child.sendline(username);

    try:
        index = child.expect([ '[Pp]assword[: ]' ],timeout=wait )
        if index != 0 :
            Log( "错误:等待密码提示失败" )
            return -1
    except:
        Log( "错误:等待密码提示失败(超时002)" )
        return -1

    print "%s%s" % ( child.before, child.after ),

    child.sendline(password)

    try:
        index = child.expect(['(>|%|#|$)','invalid'],timeout=wait)
        if index != 0 :
            Log( "错误:等待交互提示符失败" )
            return -1
    except:
        Log( "错误:等待交互提示符失败(超时003)" )
        return -1

    print "%s%s" % ( child.before, child.after )
    print "##################################################"
    print "#   auto login success, have a lot of fun ...    #"
    print "##################################################"
    print "telnet://%s@%s" % ( username,hostaddr ),
    child.sendline()
    try:
        child.interact("::")
        Log( "结束:交互完成!" )
    except Exception,e:
        #print type(e); print e.args; print e
        Log( "错误:交互中断,退出!" )
        return -1

def TO_SSH(hostinfo):
    hostaddr=hostinfo["host"]
    username=hostinfo["name"]
    password=hostinfo["pass"]
    code=hostinfo["code"]
    wait=hostinfo["wait"]

    """ 执行连线动作"""
    global child
    if len(code)>0 :
        child = pexpect.spawn( 'luit -x -encoding %s ssh %s@%s' % (code,username,hostaddr) );
    else :
        child = pexpect.spawn( 'ssh %s@%s' % (username,hostaddr) );
    signal.signal(signal.SIGWINCH, sig_resizewin)
    login_success=0
    try:
        index = child.expect([               \
                '\(yes\/no\)\? '            ,\
                '[Pp]assword[: ]'           ,\
                '[>%#\$] {0,1}$'            ,\
                'No route to host'          ,\
                'Network is unreachable'    ,\
                'Name or service not known' ,\
                'No such device'            ,\
                'IDENTIFICATION HAS CHANGED',\
                'Host key verification failed',\
                'Connection refused'         \
                ],timeout=wait)

        print "%s%s" % ( child.before, child.after ),

        if index == 0 :
            child.sendline("yes")
            try:
                child.expect( 'assword(:| )', timeout=wait )
                print "%s%s" % ( child.before, child.after ),
                child.sendline(password)
            except:
                Log( "错误:等待密码提示失败" )
                return -1
        elif index == 1 :
            child.sendline(password)
        elif index == 2 :
            login_success=1
        elif index == 7 or index == 8 :
            Log( "错误[%s]:密码或密钥已更改" % index )
            return -1
        else:
            Log( "错误[%s]:连接主机失败" % index )
            return -1
    except Exception, e:
        #print type(e); print e.args; print e
        Log( "错误:连接主机失败(超时004)" )
        return -1

    if login_success == 0:
        try:
            index = child.expect(['[>%#\$] {0,1}$','assword:'],timeout=wait)
            if index == 1 :
                Log( "错误:密码有误" )
                return -1
        except:
            Log( "错误:等待交互提示符失败(超时005)" )
            return -1

    print "%s%s" % ( child.before, child.after )
    print "##################################################"
    print "#   auto login success, have a lot of fun ...    #"
    print "##################################################"
    print "ssh://%s@%s" % ( username,hostaddr ),
    child.sendline()
    try :
        child.interact("::")
        Log( "结束:交互完成!" )
    except pexpect.EOF :
        Log( "错误:交互中断,EOF!" )
        pass
    except :
        Log( "错误:交互中断,退出!" )
        return -1

def TO_FTP(hostinfo):
    hostaddr=hostinfo["host"]
    username=hostinfo["name"]
    password=hostinfo["pass"]
    code=hostinfo["code"]
    wait=hostinfo["wait"]

    """ 执行连线动作"""
    global child
    child = pexpect.spawn( 'ftp -n ' + hostaddr );

    signal.signal(signal.SIGWINCH, sig_resizewin)

    try:
        index = child.expect([               \
                'ftp> '                     ,\
                'Connection refused'        ,\
                'Host name lookup failure'  ,\
                'No route to host'          ,\
                'Network is unreachable'    ,\
                'Name or service not known' ,\
                ],timeout=wait)
        print "%s%s" % ( child.before, child.after ),
        if index == 0 :
            child.sendline( "user " + username );
        else :
            Log( "错误[%s]:主机交互失败" % index )
            return -1
    except:
        Log( "错误:连接主机失败(超时006)" )
        return -1

    while True :
        try:
            index = child.expect([               \
                    '\n220 .*\nName .*:'       ,\
                    '\n230 .*'                  ,\
                    '\n331 .*\n[Pp]assword:'    ,\
                    '\n530 .*'                  ,\
                    ],timeout=wait)
            print "%s%s" % ( child.before, child.after ),
            if index == 0 :
                child.sendline(username);
            elif index == 1 :
                break
            elif index == 2 :
                child.sendline(password)
            elif index == 3 :
                Log( "错误:密码错误" )
                return -1
            else :
                Log( "错误[%s]:连接主机失败" % index )
                return -1
        except:
            Log( "错误:连接主机失败(超时007)" )
            return -1

    #try:
    #    index = child.expect(['ftp> '],timeout=wait)
    #except:
    #    Log( "错误:等待交互提示符失败(超时008)" )
    #    return -1

    print "%s%s" % ( child.before, child.after )

    print "##################################################"
    print "#   auto login success, have a lot of fun ...    #"
    print "##################################################"
    print "ftp://%s@%s" % ( username,hostaddr ),
    child.sendline()

    try:
        child.interact()
        Log( "结束:交互完成!" )
    except Exception,e:
        Log( "错误:交互中断,退出!" )
        return -1

def showhelp():
    print """
\033[1mNAME\033[0m
    to - telnet/ssh/ftp to remote machine.

\033[1mSYNOPSIS\033[0m
    \033[1mto\033[0m hostid [telnet|ssh|ftp]

\033[1mDESCRIPTION\033[0m
    telnet or ssh to remote machine and try autologin.
 ----------------------------------------------------------------------
 USAGE :
    to <tab>         show hosts configed in $HOME/.to.hosts
    to hostid        resolve host from config and try autologin
    to hostid ftp    autologin with ftp protocol
    to --help        display this help and exit
 ----------------------------------------------------------------------

\033[1mAUTHOR\033[0m
  shaozx@gmail.com [ 20080826 ]

          """


if __name__ == "__main__":

    # 检查配置文件
    inifile = checkConfig()

    # 显示帮助信息
    if len(sys.argv) == 1 :
        showhelp()
        sys.exit(0)

    # 检查输入参数
    hostid=sys.argv[1]
    if hostid[0]=='-':
        showhelp()
        sys.exit(0)
    elif hostid == 'LIST':
        show_hostlist()
        sys.exit(0)

    hostinfo = get_hostinfo( hostid )

    if hostinfo == "" :
        sys.exit(-1)

    # >2
    if len(sys.argv) > 2 :
        type = sys.argv[2]
    else:
        type = hostinfo["type"]

    if type == "ssh":
        TO_SSH(hostinfo);
    elif type == "ftp":
        TO_FTP(hostinfo);
    elif type == "telnet":
        TO_TELNET(hostinfo);
    else:
        show_hostinfo(hostid)

